This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by quda configure 0.5, which was
generated by GNU Autoconf 2.63.  Invocation command line was

  $ ./configure 

## --------- ##
## Platform. ##
## --------- ##

hostname = astrel
uname -m = x86_64
uname -r = 3.2.0-38-generic
uname -s = Linux
uname -v = #61-Ubuntu SMP Tue Feb 19 12:18:21 UTC 2013

/usr/bin/uname -p = unknown
/bin/uname -X     = unknown

/bin/arch              = unknown
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /home/astrel/Install/fftw-3.3.3/bin
PATH: /home/astrel/Install/openmpi-1.6.3/bin
PATH: /usr/lib/lightdm/lightdm
PATH: /usr/local/sbin
PATH: /usr/local/bin
PATH: /usr/sbin
PATH: /usr/bin
PATH: /sbin
PATH: /bin
PATH: /usr/games


## ----------- ##
## Core tests. ##
## ----------- ##

configure:3312: checking for gcc
configure:3328: found /usr/bin/gcc
configure:3339: result: gcc
configure:3373: checking for C compiler version
configure:3381: gcc --version >&5
gcc (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3
Copyright (C) 2011 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

configure:3385: $? = 0
configure:3392: gcc -v >&5
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.6/lto-wrapper
Target: x86_64-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Ubuntu/Linaro 4.6.3-1ubuntu5' --with-bugurl=file:///usr/share/doc/gcc-4.6/README.Bugs --enable-languages=c,c++,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.6 --enable-shared --enable-linker-build-id --with-system-zlib --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.6 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --enable-plugin --enable-objc-gc --disable-werror --with-arch-32=i686 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu
Thread model: posix
gcc version 4.6.3 (Ubuntu/Linaro 4.6.3-1ubuntu5) 
configure:3396: $? = 0
configure:3403: gcc -V >&5
gcc: error: unrecognized option '-V'
gcc: fatal error: no input files
compilation terminated.
configure:3407: $? = 4
configure:3410: checking whether we are using the GNU C compiler
configure:3439: gcc -c   conftest.c >&5
configure:3446: $? = 0
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME "quda"
| #define PACKAGE_TARNAME "quda"
| #define PACKAGE_VERSION "0.5"
| #define PACKAGE_STRING "quda 0.5"
| #define PACKAGE_BUGREPORT "quda-developers@googlegroups.com"
| /* end confdefs.h.  */
| 
| int
| main ()
| {
| #ifndef __GNUC__
|        choke me
| #endif
| 
|   ;
|   return 0;
| }
configure:3463: result: no
configure:3472: checking whether gcc accepts -g
configure:3502: gcc -c -g  conftest.c >&5
configure:3509: $? = 0
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME "quda"
| #define PACKAGE_TARNAME "quda"
| #define PACKAGE_VERSION "0.5"
| #define PACKAGE_STRING "quda 0.5"
| #define PACKAGE_BUGREPORT "quda-developers@googlegroups.com"
| /* end confdefs.h.  */
| 
| int
| main ()
| {
| 
|   ;
|   return 0;
| }
configure:3541: gcc -c   conftest.c >&5
configure:3548: $? = 0
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME "quda"
| #define PACKAGE_TARNAME "quda"
| #define PACKAGE_VERSION "0.5"
| #define PACKAGE_STRING "quda 0.5"
| #define PACKAGE_BUGREPORT "quda-developers@googlegroups.com"
| /* end confdefs.h.  */
| 
| int
| main ()
| {
| 
|   ;
|   return 0;
| }
configure:3581: gcc -c -g  conftest.c >&5
configure:3588: $? = 0
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME "quda"
| #define PACKAGE_TARNAME "quda"
| #define PACKAGE_VERSION "0.5"
| #define PACKAGE_STRING "quda 0.5"
| #define PACKAGE_BUGREPORT "quda-developers@googlegroups.com"
| /* end confdefs.h.  */
| 
| int
| main ()
| {
| 
|   ;
|   return 0;
| }
configure:3610: result: no
configure:3627: checking for gcc option to accept ISO C89
configure:3701: gcc  -c   conftest.c >&5
configure:3708: $? = 0
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME "quda"
| #define PACKAGE_TARNAME "quda"
| #define PACKAGE_VERSION "0.5"
| #define PACKAGE_STRING "quda 0.5"
| #define PACKAGE_BUGREPORT "quda-developers@googlegroups.com"
| /* end confdefs.h.  */
| #include <stdarg.h>
| #include <stdio.h>
| #include <sys/types.h>
| #include <sys/stat.h>
| /* Most of the following tests are stolen from RCS 5.7's src/conf.sh.  */
| struct buf { int x; };
| FILE * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not '\xHH' hex character constants.
|    These don't provoke an error unfortunately, instead are silently treated
|    as 'x'.  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously '\x00'!='x' always comes out true, for an
|    array size at least.  It's necessary to write '\x00'==0 to get something
|    that's true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, FILE *(*)(struct buf *, struct stat *, int), int, int);
| int argc;
| char **argv;
| int
| main ()
| {
| return f (e, argv, 0) != argv[0]  ||  f (e, argv, 1) != argv[1];
|   ;
|   return 0;
| }
configure:3701: gcc -qlanglvl=extc89 -c   conftest.c >&5
gcc: error: unrecognized option '-qlanglvl=extc89'
configure:3708: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME "quda"
| #define PACKAGE_TARNAME "quda"
| #define PACKAGE_VERSION "0.5"
| #define PACKAGE_STRING "quda 0.5"
| #define PACKAGE_BUGREPORT "quda-developers@googlegroups.com"
| /* end confdefs.h.  */
| #include <stdarg.h>
| #include <stdio.h>
| #include <sys/types.h>
| #include <sys/stat.h>
| /* Most of the following tests are stolen from RCS 5.7's src/conf.sh.  */
| struct buf { int x; };
| FILE * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not '\xHH' hex character constants.
|    These don't provoke an error unfortunately, instead are silently treated
|    as 'x'.  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously '\x00'!='x' always comes out true, for an
|    array size at least.  It's necessary to write '\x00'==0 to get something
|    that's true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, FILE *(*)(struct buf *, struct stat *, int), int, int);
| int argc;
| char **argv;
| int
| main ()
| {
| return f (e, argv, 0) != argv[0]  ||  f (e, argv, 1) != argv[1];
|   ;
|   return 0;
| }
configure:3701: gcc -qlanglvl=ansi -c   conftest.c >&5
gcc: error: unrecognized option '-qlanglvl=ansi'
configure:3708: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME "quda"
| #define PACKAGE_TARNAME "quda"
| #define PACKAGE_VERSION "0.5"
| #define PACKAGE_STRING "quda 0.5"
| #define PACKAGE_BUGREPORT "quda-developers@googlegroups.com"
| /* end confdefs.h.  */
| #include <stdarg.h>
| #include <stdio.h>
| #include <sys/types.h>
| #include <sys/stat.h>
| /* Most of the following tests are stolen from RCS 5.7's src/conf.sh.  */
| struct buf { int x; };
| FILE * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not '\xHH' hex character constants.
|    These don't provoke an error unfortunately, instead are silently treated
|    as 'x'.  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously '\x00'!='x' always comes out true, for an
|    array size at least.  It's necessary to write '\x00'==0 to get something
|    that's true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, FILE *(*)(struct buf *, struct stat *, int), int, int);
| int argc;
| char **argv;
| int
| main ()
| {
| return f (e, argv, 0) != argv[0]  ||  f (e, argv, 1) != argv[1];
|   ;
|   return 0;
| }
configure:3701: gcc -std -c   conftest.c >&5
cc1: error: unrecognized command line option '-std'
configure:3708: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME "quda"
| #define PACKAGE_TARNAME "quda"
| #define PACKAGE_VERSION "0.5"
| #define PACKAGE_STRING "quda 0.5"
| #define PACKAGE_BUGREPORT "quda-developers@googlegroups.com"
| /* end confdefs.h.  */
| #include <stdarg.h>
| #include <stdio.h>
| #include <sys/types.h>
| #include <sys/stat.h>
| /* Most of the following tests are stolen from RCS 5.7's src/conf.sh.  */
| struct buf { int x; };
| FILE * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not '\xHH' hex character constants.
|    These don't provoke an error unfortunately, instead are silently treated
|    as 'x'.  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously '\x00'!='x' always comes out true, for an
|    array size at least.  It's necessary to write '\x00'==0 to get something
|    that's true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, FILE *(*)(struct buf *, struct stat *, int), int, int);
| int argc;
| char **argv;
| int
| main ()
| {
| return f (e, argv, 0) != argv[0]  ||  f (e, argv, 1) != argv[1];
|   ;
|   return 0;
| }
configure:3701: gcc -Ae -c   conftest.c >&5
<command-line>:0:1: error: missing '(' after predicate
configure:3708: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME "quda"
| #define PACKAGE_TARNAME "quda"
| #define PACKAGE_VERSION "0.5"
| #define PACKAGE_STRING "quda 0.5"
| #define PACKAGE_BUGREPORT "quda-developers@googlegroups.com"
| /* end confdefs.h.  */
| #include <stdarg.h>
| #include <stdio.h>
| #include <sys/types.h>
| #include <sys/stat.h>
| /* Most of the following tests are stolen from RCS 5.7's src/conf.sh.  */
| struct buf { int x; };
| FILE * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not '\xHH' hex character constants.
|    These don't provoke an error unfortunately, instead are silently treated
|    as 'x'.  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously '\x00'!='x' always comes out true, for an
|    array size at least.  It's necessary to write '\x00'==0 to get something
|    that's true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, FILE *(*)(struct buf *, struct stat *, int), int, int);
| int argc;
| char **argv;
| int
| main ()
| {
| return f (e, argv, 0) != argv[0]  ||  f (e, argv, 1) != argv[1];
|   ;
|   return 0;
| }
configure:3701: gcc -Aa -D_HPUX_SOURCE -c   conftest.c >&5
<command-line>:0:1: error: missing '(' after predicate
configure:3708: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME "quda"
| #define PACKAGE_TARNAME "quda"
| #define PACKAGE_VERSION "0.5"
| #define PACKAGE_STRING "quda 0.5"
| #define PACKAGE_BUGREPORT "quda-developers@googlegroups.com"
| /* end confdefs.h.  */
| #include <stdarg.h>
| #include <stdio.h>
| #include <sys/types.h>
| #include <sys/stat.h>
| /* Most of the following tests are stolen from RCS 5.7's src/conf.sh.  */
| struct buf { int x; };
| FILE * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not '\xHH' hex character constants.
|    These don't provoke an error unfortunately, instead are silently treated
|    as 'x'.  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously '\x00'!='x' always comes out true, for an
|    array size at least.  It's necessary to write '\x00'==0 to get something
|    that's true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, FILE *(*)(struct buf *, struct stat *, int), int, int);
| int argc;
| char **argv;
| int
| main ()
| {
| return f (e, argv, 0) != argv[0]  ||  f (e, argv, 1) != argv[1];
|   ;
|   return 0;
| }
configure:3701: gcc -Xc -D__EXTENSIONS__ -c   conftest.c >&5
gcc: error: unrecognized option '-Xc'
configure:3708: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME "quda"
| #define PACKAGE_TARNAME "quda"
| #define PACKAGE_VERSION "0.5"
| #define PACKAGE_STRING "quda 0.5"
| #define PACKAGE_BUGREPORT "quda-developers@googlegroups.com"
| /* end confdefs.h.  */
| #include <stdarg.h>
| #include <stdio.h>
| #include <sys/types.h>
| #include <sys/stat.h>
| /* Most of the following tests are stolen from RCS 5.7's src/conf.sh.  */
| struct buf { int x; };
| FILE * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not '\xHH' hex character constants.
|    These don't provoke an error unfortunately, instead are silently treated
|    as 'x'.  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously '\x00'!='x' always comes out true, for an
|    array size at least.  It's necessary to write '\x00'==0 to get something
|    that's true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, FILE *(*)(struct buf *, struct stat *, int), int, int);
| int argc;
| char **argv;
| int
| main ()
| {
| return f (e, argv, 0) != argv[0]  ||  f (e, argv, 1) != argv[1];
|   ;
|   return 0;
| }
configure:3734: result: unsupported
configure:3806: checking for g++
configure:3822: found /usr/bin/g++
configure:3833: result: g++
configure:3860: checking for C++ compiler version
configure:3868: g++ --version >&5
g++ (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3
Copyright (C) 2011 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

configure:3872: $? = 0
configure:3879: g++ -v >&5
Using built-in specs.
COLLECT_GCC=g++
COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.6/lto-wrapper
Target: x86_64-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Ubuntu/Linaro 4.6.3-1ubuntu5' --with-bugurl=file:///usr/share/doc/gcc-4.6/README.Bugs --enable-languages=c,c++,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.6 --enable-shared --enable-linker-build-id --with-system-zlib --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.6 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --enable-plugin --enable-objc-gc --disable-werror --with-arch-32=i686 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu
Thread model: posix
gcc version 4.6.3 (Ubuntu/Linaro 4.6.3-1ubuntu5) 
configure:3883: $? = 0
configure:3890: g++ -V >&5
g++: error: unrecognized option '-V'
g++: fatal error: no input files
compilation terminated.
configure:3894: $? = 4
configure:3897: checking whether we are using the GNU C++ compiler
configure:3926: g++ -c   conftest.cpp >&5
configure:3933: $? = 0
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME "quda"
| #define PACKAGE_TARNAME "quda"
| #define PACKAGE_VERSION "0.5"
| #define PACKAGE_STRING "quda 0.5"
| #define PACKAGE_BUGREPORT "quda-developers@googlegroups.com"
| /* end confdefs.h.  */
| 
| int
| main ()
| {
| #ifndef __GNUC__
|        choke me
| #endif
| 
|   ;
|   return 0;
| }
configure:3950: result: no
configure:3959: checking whether g++ accepts -g
configure:3989: g++ -c -g  conftest.cpp >&5
configure:3996: $? = 0
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME "quda"
| #define PACKAGE_TARNAME "quda"
| #define PACKAGE_VERSION "0.5"
| #define PACKAGE_STRING "quda 0.5"
| #define PACKAGE_BUGREPORT "quda-developers@googlegroups.com"
| /* end confdefs.h.  */
| 
| int
| main ()
| {
| 
|   ;
|   return 0;
| }
configure:4028: g++ -c   conftest.cpp >&5
configure:4035: $? = 0
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME "quda"
| #define PACKAGE_TARNAME "quda"
| #define PACKAGE_VERSION "0.5"
| #define PACKAGE_STRING "quda 0.5"
| #define PACKAGE_BUGREPORT "quda-developers@googlegroups.com"
| /* end confdefs.h.  */
| 
| int
| main ()
| {
| 
|   ;
|   return 0;
| }
configure:4068: g++ -c -g  conftest.cpp >&5
configure:4075: $? = 0
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME "quda"
| #define PACKAGE_TARNAME "quda"
| #define PACKAGE_VERSION "0.5"
| #define PACKAGE_STRING "quda 0.5"
| #define PACKAGE_BUGREPORT "quda-developers@googlegroups.com"
| /* end confdefs.h.  */
| 
| int
| main ()
| {
| 
|   ;
|   return 0;
| }
configure:4097: result: no
configure:4591: Setting CUDA_INSTALL_PATH = /usr/local/cuda 
configure:4596: Setting CPU_ARCH = x86_64 
configure:4601: Setting GPU_ARCH = sm_35 
configure:4606: Setting OS = linux 
configure:4611: Setting QUDA_PYTHON = python 
configure:4616: Setting HOST_DEBUG = no 
configure:4621: Setting DEVICE_DEBUG = no 
configure:4626: Setting VERBOSE = no 
configure:4631: Setting BUILD_WILSON_DIRAC = yes 
configure:4636: Setting BUILD_CLOVER_DIRAC = yes 
configure:4641: Setting BUILD_DOMAIN_WALL_DIRAC = yes 
configure:4646: Setting BUILD_STAGGERED_DIRAC = yes 
configure:4651: Setting BUILD_TWISTED_MASS_DIRAC = yes 
configure:4656: Setting BUILD_NDEG_TWISTED_MASS_DIRAC = no 
configure:4661: Setting BUILD_FATLINK = no  
configure:4666: Setting BUILD_HISQLINK = no  
configure:4671: Setting BUILD_GAUGE_FORCE = no  
configure:4676: Setting BUILD_FERMION_FORCE = no  
configure:4681: Setting BUILD_HISQ_FORCE = no  
configure:4686: Setting BUILD_MULTI_GPU = no  
configure:4691: Setting BUILD_QMP = no 
configure:4696: Setting BUILD_MPI = no 
configure:4701: Setting GPU_DIRECT= yes
configure:4706: Setting BUILD_QDP_INTERFACE= yes
configure:4711: Setting BUILD_MILC_INTERFACE= yes
configure:4716: Setting BUILD_CPS_INTERFACE= no
configure:4721: Setting BUILD_QDPJIT_INTERFACE= no
configure:4726: Setting BUILD_BQCD_INTERFACE= no
configure:4731: Setting DEVICE_PACK= no
configure:4736: Setting BUILD_QIO = no 
configure:4741: Setting FECC = gcc 
configure:4746: Setting FECXX = g++ 
configure:4751: Setting FEF90 =  
configure:4756: Setting MPI_HOME=
configure:4761: Setting QMP_HOME=
configure:4766: Setting QIO_HOME=
configure:4771: Setting BLAS_TEX= yes
configure:4776: Setting FERMI_DBLE_TEX= yes
configure:4781: Setting NUMA_AFFINITY= yes
configure:4786: Setting USE_QDPJIT = no 
configure:4791: Setting QDP_INSTALL_PATH =  
configure:4936: creating ./config.status

## ---------------------- ##
## Running config.status. ##
## ---------------------- ##

This file was extended by quda config.status 0.5, which was
generated by GNU Autoconf 2.63.  Invocation command line was

  CONFIG_FILES    = 
  CONFIG_HEADERS  = 
  CONFIG_LINKS    = 
  CONFIG_COMMANDS = 
  $ ./config.status 

on astrel

config.status:689: creating make.inc

## ---------------- ##
## Cache variables. ##
## ---------------- ##

ac_cv_c_compiler_gnu=no
ac_cv_cxx_compiler_gnu=no
ac_cv_env_CCC_set=
ac_cv_env_CCC_value=
ac_cv_env_CC_set=
ac_cv_env_CC_value=
ac_cv_env_CFLAGS_set=
ac_cv_env_CFLAGS_value=
ac_cv_env_CPPFLAGS_set=
ac_cv_env_CPPFLAGS_value=
ac_cv_env_CXXFLAGS_set=
ac_cv_env_CXXFLAGS_value=
ac_cv_env_CXX_set=
ac_cv_env_CXX_value=
ac_cv_env_LDFLAGS_set=
ac_cv_env_LDFLAGS_value=
ac_cv_env_LIBS_set=
ac_cv_env_LIBS_value=
ac_cv_env_build_alias_set=
ac_cv_env_build_alias_value=
ac_cv_env_host_alias_set=
ac_cv_env_host_alias_value=
ac_cv_env_target_alias_set=
ac_cv_env_target_alias_value=
ac_cv_prog_ac_ct_CC=gcc
ac_cv_prog_ac_ct_CXX=g++
ac_cv_prog_cc_c89=no
ac_cv_prog_cc_g=no
ac_cv_prog_cxx_g=no

## ----------------- ##
## Output variables. ##
## ----------------- ##

BLAS_TEX='yes'
BUILD_BQCD_INTERFACE='no'
BUILD_CLOVER_DIRAC='yes'
BUILD_CPS_INTERFACE='no'
BUILD_DOMAIN_WALL_DIRAC='yes'
BUILD_FATLINK='no'
BUILD_FERMION_FORCE='no'
BUILD_GAUGE_FORCE='no'
BUILD_HISQLINK='no'
BUILD_HISQ_FORCE='no'
BUILD_MILC_INTERFACE='yes'
BUILD_MPI='no'
BUILD_MULTI_GPU='no'
BUILD_NDEG_TWISTED_MASS_DIRAC='no'
BUILD_QDPJIT_INTERFACE='no'
BUILD_QDP_INTERFACE='yes'
BUILD_QIO='no'
BUILD_QMP='no'
BUILD_STAGGERED_DIRAC='yes'
BUILD_TWISTED_MASS_DIRAC='yes'
BUILD_WILSON_DIRAC='yes'
CC='gcc'
CFLAGS=''
CPPFLAGS=''
CPU_ARCH='x86_64'
CUDA_INSTALL_PATH='/usr/local/cuda'
CXX='g++'
CXXFLAGS=''
DEFS='-DPACKAGE_NAME=\"quda\" -DPACKAGE_TARNAME=\"quda\" -DPACKAGE_VERSION=\"0.5\" -DPACKAGE_STRING=\"quda\ 0.5\" -DPACKAGE_BUGREPORT=\"quda-developers@googlegroups.com\"'
DEVICE_DEBUG='no'
DEVICE_PACK='no'
ECHO_C=''
ECHO_N='-n'
ECHO_T=''
EXEEXT=''
FECC='gcc'
FECXX='g++'
FEF90=''
FERMI_DBLE_TEX='yes'
GPU_ARCH='sm_35'
GPU_DIRECT='yes'
HOST_DEBUG='no'
LDFLAGS=''
LIBOBJS=''
LIBS=''
LTLIBOBJS=''
MPI_HOME=''
NUMA_AFFINITY='yes'
OBJEXT=''
PACKAGE_BUGREPORT='quda-developers@googlegroups.com'
PACKAGE_NAME='quda'
PACKAGE_STRING='quda 0.5'
PACKAGE_TARNAME='quda'
PACKAGE_VERSION='0.5'
PATH_SEPARATOR=':'
QDPXX_CONFIG=''
QDPXX_CXXFLAGS=''
QDPXX_LDFLAGS=''
QDPXX_LIBS=''
QDP_INSTALL_PATH=''
QIO_HOME=''
QMP_HOME=''
QUDA_OS='linux'
QUDA_PYTHON='python'
SHELL='/bin/bash'
USE_QDPJIT='no'
VERBOSE='no'
ac_ct_CC='gcc'
ac_ct_CXX='g++'
bindir='${exec_prefix}/bin'
build_alias=''
datadir='${datarootdir}'
datarootdir='${prefix}/share'
docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
dvidir='${docdir}'
exec_prefix='${prefix}'
host_alias=''
htmldir='${docdir}'
includedir='${prefix}/include'
infodir='${datarootdir}/info'
libdir='${exec_prefix}/lib'
libexecdir='${exec_prefix}/libexec'
localedir='${datarootdir}/locale'
localstatedir='${prefix}/var'
mandir='${datarootdir}/man'
oldincludedir='/usr/include'
pdfdir='${docdir}'
prefix='/usr/local'
program_transform_name='s,x,x,'
psdir='${docdir}'
sbindir='${exec_prefix}/sbin'
sharedstatedir='${prefix}/com'
sysconfdir='${prefix}/etc'
target_alias=''

## ----------- ##
## confdefs.h. ##
## ----------- ##

#define PACKAGE_NAME "quda"
#define PACKAGE_TARNAME "quda"
#define PACKAGE_VERSION "0.5"
#define PACKAGE_STRING "quda 0.5"
#define PACKAGE_BUGREPORT "quda-developers@googlegroups.com"

configure: exit 0
